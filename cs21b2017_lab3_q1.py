# -*- coding: utf-8 -*-
"""cs21b2017_lab3_Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pujk5lw9g_KoseCC_HdyxJsRFOS1RPXc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

path='/content/drive/MyDrive/iris.csv'
df=pd.read_csv(path)
df

df.head()



df1=df.drop(columns=['PetalLengthCm','PetalWidthCm'])
df1.head()

df_train=pd.concat([df1[:40],df1[50:90],df1[100:140]],ignore_index=True)
df_train.head()

df_test=pd.concat([df1[40:50],df1[90:100],df1[140:150]],ignore_index=True)
df_test.head()

x=df_train['SepalLengthCm'].values
y=df_train['SepalWidthCm'].values
plt.scatter(x,y)
plt.xlabel('SepalLength')
plt.ylabel('SepalWidth')
plt.show()

import math
def euclidian_distane(x1,y1,x2,y2):
    dis=(x1-x2)**2+(y1-y2)**2
    dis=math.sqrt(dis)
    return dis
x=df_test['SepalLengthCm'].values
y=df_test['SepalWidthCm'].values
lis=[]
for i in range(len(x)):
    x1=df_train['SepalLengthCm'].values
    y1=df_train['SepalWidthCm'].values
    lis1=[]
    for j in range(len(x1)):
        dis=euclidian_distane(x[i],y[i],x1[j],y1[j])
        lis1.append(dis)
    lis.append(lis1)
df_distance=pd.DataFrame(lis)
df_distance=df_distance.T
df_distance

k=int(input("Enter the k nearest neighbors\n"))
x=df_distance.columns
x=list(x)
lis1=[]
indices=[]
for i in x:
    y=df_distance[i].values
    y=np.array(y)
    sorted_indices = np.argsort(y)[:k]
    indices.append(sorted_indices)
    y.sort()
    lis=[]
    for j in range(k):
        lis.append(y[j])
    lis1.append(lis)
df_nearest_distance=pd.DataFrame(lis1)
df_indices=pd.DataFrame(indices)
df_nearest_distance=df_nearest_distance.T
df_nearest_distance

df_indices=df_indices.T
df_indices

def votes(lis):
    x1=0
    x2=0
    x3=0
    for i in lis:
        if(i==0 or 0<i<39 or i==39):
            x1+=1
        elif(i==50 or 50<i<89 or i==89):
            x2+=1
        elif(i==90 or 90<i<119 or i==119):
            x3+=1
    lis=np.array([x1,x2,x3])
    x=np.argmax(lis)
    y=' '
    if(x==0):
        y='Iris-setosa'
    elif(x==1):
        y='Iris-versicolor'
    elif(x==2):
        y='Iris-virginica'

    return y

indi_columns=df_indices.columns
lis=[]
for i in indi_columns:
    val=df_indices[i].values
    val=list(val)
    u=votes(val)
    lis.append(u)
df_vote=pd.DataFrame(lis)
df_vote

def accuracy(df_vote):
    test=df_test['Species'].values
    test=list(test)
    pred=df_vote[0].values
    pred=list(pred)
    sum=0
    for i in range(len(pred)):
        if(test[i]==pred[i]):
            sum+=1
    total=len(pred)
    x=sum/total
    return x
y=accuracy(df_vote)
print("Accuracy :",y*100)

K_values=10
x1=[]
acc=[]
x=df_distance.columns
for i in range(1,K_values+1):
    x1.append(i)
    indices=[]
    for j in x:
        y=df_distance[j].values
        y=np.array(y)
        sorted_indices = np.argsort(y)[:i]
        indices.append(sorted_indices)
    df_indices=pd.DataFrame(indices)
    df_indices=df_indices.T
    indi_columns=df_indices.columns
    lis=[]
    for i in indi_columns:
        val=df_indices[i].values
        val=list(val)
        u=votes(val)
        lis.append(u)
    df_vote=pd.DataFrame(lis)
    y1=accuracy(df_vote)
    y1=y1*100
    acc.append(y1)
x1=np.array(x1)
acc=np.array(acc)
plt.plot(x1,acc)
plt.xlabel("Neighbors")
plt.ylabel("Accuracy")
plt.show()

df_train_1=pd.concat([df[:40],df[50:90],df[100:140]],ignore_index=True)
df_train_1.head()

df_test_1=pd.concat([df[40:50],df[90:100],df[140:150]],ignore_index=True)
df_test_1.head()

def euclidian_distane(x1,y1,z1,a1,x2,y2,z2,a2):
    dis=(x1-x2)**2+(y1-y2)**2 +(z1-z2)**2+(a1-a2)**2
    dis=math.sqrt(dis)
    return dis
x=df_test_1['SepalLengthCm'].values
y=df_test_1['SepalWidthCm'].values
z=df_test_1['PetalLengthCm'].values
a=df_test_1['PetalWidthCm'].values
lis=[]
for i in range(len(x)):
    x1=df_train_1['SepalLengthCm'].values
    y1=df_train_1['SepalWidthCm'].values
    z1=df_train_1['PetalLengthCm'].values
    a1=df_train_1['PetalWidthCm'].values
    lis1=[]
    for j in range(len(x1)):
        dis=euclidian_distane(x[i],y[i],z[i],a[i],x1[j],y1[j],z1[j],a1[j])
        lis1.append(dis)
    lis.append(lis1)
df_distance_1=pd.DataFrame(lis)
df_distance_1=df_distance_1.T
df_distance_1

k=int(input("Enter the k nearest neighbors\n"))
x=df_distance_1.columns
x=list(x)
lis1=[]
indices=[]
for i in x:
    y=df_distance_1[i].values
    y=np.array(y)
    sorted_indices = np.argsort(y)[:k]
    indices.append(sorted_indices)
    y.sort()
    lis=[]
    for j in range(k):
        lis.append(y[j])
    lis1.append(lis)
df_nearest_distance_1=pd.DataFrame(lis1)
df_indices_1=pd.DataFrame(indices)
df_indices_1=df_indices_1.T
df_nearest_distance_1=df_nearest_distance_1.T
df_nearest_distance_1

indi_columns=df_indices_1.columns
lis=[]
for i in indi_columns:
    val=df_indices_1[i].values
    val=list(val)
    u=votes(val)
    lis.append(u)
df_vote_1=pd.DataFrame(lis)
y=accuracy(df_vote_1)
print("Accuracy :",y*100)

K_values=10
x1=[]
acc=[]
x=df_distance_1.columns
for i in range(1,K_values+1):
    x1.append(i)
    indices=[]
    for j in x:
        y=df_distance_1[j].values
        y=np.array(y)
        sorted_indices = np.argsort(y)[:i]
        indices.append(sorted_indices)
    df_indices_1=pd.DataFrame(indices)
    df_indices_1=df_indices_1.T
    indi_columns=df_indices_1.columns
    lis=[]
    for i in indi_columns:
        val=df_indices_1[i].values
        val=list(val)
        u=votes(val)
        lis.append(u)
    df_vote_1=pd.DataFrame(lis)
    y1=accuracy(df_vote_1)
    y1=y1*100
    acc.append(y1)
x1=np.array(x1)
acc=np.array(acc)
plt.plot(x1,acc)
plt.xlabel("Neighbors")
plt.ylabel("Accuracy")
plt.show()